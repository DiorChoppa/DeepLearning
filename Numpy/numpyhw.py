# -*- coding: utf-8 -*-
"""NumpyHW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o-pjbQ9_lseBW3aMSf3wsHJPatQ08OuW
"""

import numpy as np

a = [[5, 1, -2, 0],
     [0, 3, 4, 3],
     [2, 3, 1, 1]]
     
b = [[1, -3],
     [2, -2],
     [3, -1],
     [0, 0]]

def no_numpy_mult(first, second):
    string = len(second)
    cell = len(first)
    r2 = len(second[0])
    res = [[0 for i in range(r2)] for j in range(cell)]
    for i in range(cell):
      for j in range(r2):
        for k in range(string):
          res[i][j] += first[i][k] * second[k][j]
    return res

print(no_numpy_mult(a, b))

def numpy_mult(first, second):
  res = np.dot(a, b)
  return res

print (numpy_mult(a, b))

import numpy as np

a = np.random.sample((1, 3))
a = list(a)[0]
b = np.random.sample((1, 3))
b = list(b)[0]
print(a, b, '\n')

def non_numpy_scalar(first, second):
  result = 0
  for i in range(len(first)):
    result += first[i] * second[i]
  return result

def numpy_scalar(first, second):
  result = np.matmul(first, second)
  return result

print(non_numpy_scalar(a, b))
print(numpy_scalar(a, b))

import numpy as np

def diag_2k(a):
  result = 0
  d = a.diagonal()
  for i in d:
    if(i%2 == 0): result+=i
  return result

a = np.array([[5, 1, -2, 0],[3, 6, 1, 1],[0, 3, 4, 3],[2, 3, 1, 2]])
print(diag_2k(a))

import numpy as np

def cumsum(A):
  a = np.array(A)
  result = []
  for i in a:
    result.append(np.cumsum(i))
  result = np.array(result)
  return result

a = np.array([[5, 1, -2, 0],[3, 6, 1, 1],[0, 3, 4, 3],[2, 3, 1, 2]])
print(cumsum(a))

import numpy as np

a = np.array([[100, 200, 300, 400, 500], [100, 200, 300, 400, 500]])

def transform(X, a = 1):
  Y = np.copy(X)
  for i in Y:
    cnt = 0
    for j in range(len(i)):
      if(cnt%2): i[j] = a
      if(cnt%2 == 0):i[j] = i[j] ** 3
      cnt+=1
  Y = Y[:,::-1]
  for i in range(len(Y)):
    j = np.hstack((X[i], Y[i]))
  return np.hstack((X, Y))

print(transform(a))

import numpy as np

a = np.array([1, 2, 2, 3, 3, 1, 1, 5, 5, 2, 3, 3])

def encode(a):
  retr = []
  cont = []
  count = 0
  for i in range(len(a)-1):
    if(i!=len(a)):
      if(a[i]==a[i+1]):
        count += 1
      else:
        if(i!=len(a)-1):
          cont.append(a[i])
          retr.append(count)
          count = 0
  else:
    if(count==1):
      cont.append(a[i])
      retr.append(1)
  return np.array(cont), np.array(retr)+1

print(encode(a))

